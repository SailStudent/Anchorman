include:
  - project: cdso/cdso
    ref: main
    file:
      - pipelines/application-security-review.yml

.build-container:tags:
    tags:
        - cdso-large

variables:
  DEPLOYMENT_LEVEL: PRODUCTION
  CONTAINER_LIFESPAN: PERSISTENT
  CONNECTION_CONTEXT: INTERNAL
  ZAP_SERVICE_PORT: 8501
  PROJECT_ID_WITH_SDD: 20168
  SONAR_SCANNER_OPTS: "-Xmx2g"
  TRUFFLEHOG_EXCLUDE: "app/services/get_forecast_from_openweathermap.py"
  CONTAINER_SPEC_NON_MINIMIZED: >-
    Some container dependencies rely on Ubuntu runtime.

  CVE_2024_6923: >-
    There is a MEDIUM severity vulnerability affecting CPython. The email module didn&#8217;t properly quote newlines for email headers when serializing an email message
    allowing for header injection when an email is serialized.

    Container Notes:
    This container does not use the CPython Email Module. 
    
  CVE_2024_28834: >- 
    A flaw was found in GnuTLS. The Minerva attack is a cryptographic vulnerability that exploits deterministic behavior in systems like GnuTLS, leading to side-channel leaks. 
    In specific scenarios, such as when using the GNUTLS_PRIVKEY_FLAG_REPRODUCIBLE flag, it can result in a noticeable step in nonce size from 513 to 512 bits,
    exposing a potential timing side-channel.

    Container Notes:
    This container is not using the GNUTLS_PRIVKEY_FLAG_REPRODUCIBLE flag. By not using this flag, GnuTLS should default to its standard nonce generation methods, 
    which ideally would include more randomness and less predictability. This decreases the vulnerability to timing side-channel attacks that rely on the predictability facilitated by the reproducible flag.


  CVE_2024_28835: >-
    A flaw has been discovered in GnuTLS where an application crash can be induced when attempting to verify a specially crafted .pem bundle using the “certtool --verify-chain” 
    command.

    Container Notes:
    This container does not verify .pem files and it does not use the certtool --verify-chain eliminating the risk of this being exploited.


  CVE_2024_2236: >-
    A timing-based side-channel flaw was found in libgcrypt’s RSA implementation. This issue may allow a remote attacker to initiate a Bleichenbacher-style attack, which can lead 
    to the decryption of RSA ciphertexts.

    Container Notes:
    There is no exchange of RSA keys between the user and container due to the reverse proxy. 



  CVE_2022_27943: >-
    libiberty/rust_demangle.c in GNU GCC 11.2 allows stack consumption in demangle_const, as demonstrated by nm_new.

    Container Notes:
    This vulnerability does not apply, GNU GCC version in this container is 11.4.0

  CVE_2016_20013: >-
    sha256crypt and sha512crypt through 0.6 allow attackers to cause a denial of service (CPU consumption) because the algorithm's runtime is proportional to the square
    of the length of the password

    Container Notes:
    This container does not run the affected version of sha256crypt or sha512crypt <= 0.6, It runs 8.32 for both.


  CVE_2024_0567: >-
    A vulnerability was found in GnuTLS, where a cockpit (which uses gnuTLS) rejects a certificate chain with distributed trust. 
    This issue occurs when validating a certificate chain with cockpit_certificate_ensure. This flaw allows an unauthenticated, remote client or attacker to initiate 
    a denial of service attack.

    Container Notes:
    This vunerability has not been replicated and is marked non affected by Ubuntu. With this statement from Ubuntu I do not think it poses any threat to this application 

    Ubuntu Notes:
    The code is different in focal and older and the reproducer doesn't appear to crash the older version of GnuTLS. Marking as not_affected.

  CVE_2024_0553: >-
    A vulnerability was found in GnuTLS. The response times to malformed ciphertexts in RSA_PSK ClientKeyExchange differ from the response times
    of ciphertexts with correct PKCS#1 v1.5 padding. This issue may allow a remote attacker to perform a timing side_channel attack in the RSA_PSK key exchange, 
    potentially leading to the leakage of sensitive data. CVE_2024_0553 is designated as an incomplete resolution for CVE_2023_5981.

    Container Notes:
    This issue is mitigated by using an NGINX reverse proxy to handle traffic into the app, preventing RSA_PSK ClientKeyExchange between the application and user. 

  CVE_2024_26462: >-
    Kerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/kdc/ndr.c.

    Container Notes: 
    This container does not use the affected version of the krb5 (1.21.2) it uses krb5 1.19.2

  CVE_2024_26461: >-
    Kerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/lib/gssapi/krb5/k5sealv3.c.

    Container Notes:
    This container does not use the affected version of the krb5 (1.21.2) it uses krb5 1.19.2

  CVE_2024_26458: >-
    Kerberos 5 (aka krb5) 1.21.2 contains a memory leak in /krb5/src/lib/rpc/pmap_rmt.c.

    Container Notes:
    This container does not use the affected version of the krb5 (1.21.2) it uses krb5 1.19.2

  CVE_2020_22916: >- 
    ** DISPUTED ** An issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. 
    NOTE: the vendor disputes the claims of “endless output” and “denial of service” because decompression of the 17,486 bytes always results in 114,881,179 bytes, 
    which is often a reasonable size increase.

    Container Notes:
    This CVE appears to be poorly documented and has not been reproduced. Therefore I do not believe it poses and risk to our application. 

    Ubuntu Notes:
    There are no details about this ancient CVE. The original URL
    is gone and the xz_utils developers can't reproduce it as of 2023_09_15.

  CVE_2023_50495: >-
    NCurse v6.4_20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().

    Container Notes:
    No security impact as terminfo files are trusted.

    Ubuntu Notes:
    This is in the code that parses terminfo database files.Terminfo files are normally trusted, and since the fix for CVE_2023_29491, we no longer parse terminfo files when apps are
    setuid. As such, this doesn't really have a security impact.

  CVE_2023_45918: >-
    ncurses 6.4_20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.

    Container Notes:
    No security impact as terminfo files are trusted.

    Ubuntu Notes:
    This is in the code that parses terminfo database files.terminfo files are normally trusted, and since the fix forCVE_2023_29491, we no longer parse terminfo files when apps are
    setuid. As such, this doesn't really have a security impact.

  CVE_2016_2781: >-
    Base container notes:
    This vulnerability is unpatched by the Canonical and is deferred meaning it may not be fixed.
    It involves escaping from a change root "jail" when the --userspec flag is present.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    A change root "jail" cannot be used as a security boundary if the --userspec flag is present.
    Interactive terminal users cannot be contained using chroot when the --userspec flag is present.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    I have restricted the execution permissions of the wall command to only the file's owner and designated group members, effectively preventing unauthorized or less privileged
    users from executing potentially exploitable commands. This tight control over permissions helps limit exposure to security risks associated with the command's misuse.

  CVE_2017_11164: >-
    Base container notes:
    This vulnerability is unpatched by the upstream (perl) and at negligible priority for Canonical.
    It involves a denial of service when an untrusted input is passed directly to pcre.
    On its own, it could result in a local denial of service.
    If included in an API, it could result in a remote denial of service.
    SonarQube catches the anti-pattern in source code that makes this vulnerability possible.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    This container must always execute with constraints on its resources to limit the impact of a denial of service.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    This container runs with constraints on it's resources to limit the impact of a denial of service.

  CVE_2022_3219: >-
    Base container notes:
    This vulnerability is unpatched by by the upsteam (gnupg) and is deferred by Canonical meaning it may not be fixed.
    It involves a local denial of service using a crafted, malicious input to gnupg.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    This container must always execute with constraints on its resources to limit the impact of a denial of service.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    This container runs with constraints on it's resources to limit the impact of a denial of service.

  CVE_2022_3715: >-
    Base container notes:
    This vulnerability is not present in 20.04 and is low priority for Canonical in 22.04.
    It involves a local-only heap-based buffer overflow in bash.
    The impacts of buffer overflows can include leaking memory, denial of service, or in some cases arbitrary code execution.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    This container must always execute with constraints on its resources to limit the impact of a denial of service.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    This container runs with constraints on it's resources to limit the impact of a denial of service.

  CVE_2022_4899: >-
    Base container notes:
    This vulnerability is present in a dependency of the package management system for Ubuntu 22.04, and a patched
    version of that dependency is not currently available in the Ubuntu package repositories.
    It involves a local-only heap-based buffer overflow in libzstd1.
    The impacts of buffer overflows can include leaking memory or a denial of service; Ubuntu prevents execution of
    arbitrary code in non-executable memory regions such as the heap by default.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    This container must always execute with constraints on its resources to limit the impact of a denial of service.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    This container runs with constraints on it's resources to limit the impact of a denial of service.

  CVE_2023_29383: >-
    Base container notes:
    This reported vulnerability is currently under initial triage / analysis in the CVD, and has not been assigned a
    CVSS score / severity or a CWE.
    Operating system users with the ability to successfully invoke the `chfn` command to change the information displayed
    about their user in `/etc/passwd` can insert control characters such as linefeed or carriage return to make it visually
    appear that a rogue user has been added, when in effect this has not occurred because user accounts are actually managed
    in `/etc/shadow`, which is not modified by `chfn`.
    Successful use of `chfn` by a non-root user requires entering the password assigned to the user.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    This container must always execute under a non-root user for which password authentication is disabled, which is a
    best practice for delivery of container-based applications.
    Derivate containers may use this mitigation as long as they comply with the above guidance.

    Container Notes:
    This container executs under the a non root user with password authentication disabled.

  CVE_2022_46908: >-
    Base container notes:
    A vulnerability was found in openldap. This security flaw causes a null pointer dereference in ber_memalloc_x() function.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    Must not pass user or untrusted input to openldap.

    Container Notes:
    This container does not use openldap. libldap is removed in the dockerfile but doesn't clean up this error which leads me to assume that it is installed as a dependency of another
    package. There is no user or untrusted input to openldap in this application.

  CVE_2023_27043: >-
    The email module of Python through 3.11.3 incorrectly parses e-mail addresses that contain a special character. The wrong portion of an RFC2822 header is identified
    as the value of the addr-spec. In some applications, an attacker can bypass a protection mechanism in which application access is granted only after verifying receipt
    of e-mail to a specific domain (e.g., only @company.example.com addresses may be used for signup). This occurs in email/_parseaddr.py in recent versions of Python.

    Container Notes:
    This container does not utilize the python email module. This application also uses python 3.10 which is not the vulnerable version.

  CVE_2024_0727: >-
    Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL to crash leading to a potential Denial of Service attack Impact summary: 
    Applications loading files in the PKCS12 format from untrusted sources might terminate abruptly. A file in PKCS12 format can contain certificates and keys
    and may come from an untrusted source. The PKCS12 specification allows certain fields to be NULL, but OpenSSL does not correctly check for this case. 
    This can lead to a NULL pointer dereference that results in OpenSSL crashing. If an application processes PKCS12 files from an untrusted source using the OpenSSL APIs 
    then that application will be vulnerable to this issue. OpenSSL APIs that are vulnerable to this are: PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(),
    PKCS12_unpack_authsafes() and PKCS12_newpass(). We have also fixed a similar issue in SMIME_write_PKCS7(). However since this function is related to writing data we do not
    consider it security significant. The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.

    Container Notes:
    The container does not load PKC12 files from untrusted sources. The only allowed input from users are PPTX, PNG, JPG, and PDF.

  CVE_2023_6237: >-
    Excessive time spent checking invalid RSA public keys.

    Container Notes:
    This issue is unlikely to appear as there is no need for the application to check RSA public keys.

  CVE_2023_6129: >-
    The POLY1305 MAC (message authentication code) implementation contains a bug that might corrupt the internal state of applications running on PowerPC CPU based
    platforms if the CPU provides vector instructions.

    Container Notes: 
    This issue only affects ppc64el. This application does not have this installed with openssl.

  CVE_2023_5678: >-
    Generating excessively long X9.42 DH keys or checking excessively long X9.42 DH keys or parameters may be very slow. Impact summary: Applications that use the
    functions DH_generate_key() to generate an X9.42 DH key may experience long delays. Likewise, applications that use DH_check_pub_key(), DH_check_pub_key_ex() or
    EVP_PKEY_public_check() to check an X9.42 DH key or X9.42 DH parameters may experience long delays. Where the key or parameters that are being checked have been obtained 
    from an untrusted source this may lead to a Denial of Service. While DH_check() performs all the necessary checks (as of CVE-2023-3817), DH_check_pub_key() doesn’t make any 
    of these checks, and is therefore vulnerable for excessively large P and Q parameters. Likewise, while DH_generate_key() performs a check for an excessively large P, it doesn’t
    check for an excessively large Q. An application that calls DH_generate_key() or DH_check_pub_key() and supplies a key or parameters obtained from an untrusted source could
    be vulnerable to a Denial of Service attack. DH_generate_key() and DH_check_pub_key() are also called by a number of other OpenSSL functions. An application calling any of 
    those other functions may similarly be affected. The other functions affected by this are DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate(). 
    Also vulnerable are the OpenSSL pkey command line application when using the ”-pubcheck” option, as well as the OpenSSL genpkey command line application.
    The OpenSSL SSL/TLS implementation is not affected by this issue. The OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.

    Container Notes:
    The OpenSSL SSL/TLS implementation is not affected by this issue as it is OpenSSL 3.0.1 and DH_generate_key() is not used in this application. 

  CVE_2023_7008: >-
    A vulnerability was found in systemd-resolved. This issue may allow systemd-resolved to accept records of DNSSEC-signed domains even when they have no signature, 
    allowing man-in-the-middles (or the upstream DNS resolver) to manipulate records.

    Container Notes:
    DNSSEC is turnd off in Ubuntu by default. This container does not turn it on 

  CVE_2023_4641: >-
    A flaw was found in shadow-utils. When asking for a new password, shadow-utils asks the password twice. If the password fails on the second attempt, 
    shadow-utils fails in cleaning the buffer used to store the first entry. This may allow an attacker with enough access to retrieve the password from the memory.

    Container Notes:
    This is a very difficult vulnerability to exploit due to the amount of access required. Ubuntu also considers this to be not exploitable in practice. Therefore I don't think it 
    presents any threat to this application

    Ubuntu Notes:
    Technically this doesn't seem able to be exploitable in practice

  CVE_2024_22365: >-
    linux-pam (aka Linux PAM) before 1.6.0 allows attackers to cause a denial of service (blocked login process) via mkfifo because the openat call (for protect_dir)
    lacks O_DIRECTORY.

    Container Notes:
    I have restricted the execution permissions of the mkfifo command to only the file's owner and designated group members, effectively preventing unauthorized or less privileged
    users from executing potentially exploitable commands. This tight control over permissions helps limit exposure to security risks associated with the command's misuse.

  CVE_2024_2961: >-
    The iconv() function in the GNU C Library versions 2.39 and older may overflow the output buffer passed to it by up to 4 bytes when converting strings to the ISO-2022-CN-EXT 
    character set, which may be used to crash an application or overwrite a neighbouring variable.

    Container Notes: 
    This container does uses GNU C Library 3.7. The affected version is 2.39 and below

  CVE_2023_7104: >-
    This issue affects the function sessionReadRecord of the file ext/session/sqlite3session.c of the component make alltest Handler. The manipulation
    leads to heap-based buffer overflow. 

    Container Notes:
    The only user input on this application is PPTX, PNG, JPG, and PDF file. This makes exploiting this vunerability extremely unlikely.

  CVE_2024_28085: >-
    wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, 
    escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.

    Container Notes:
    I have restricted the execution permissions of the wall command to only the file's owner and designated group members, effectively preventing unauthorized or less privileged
    users from executing potentially exploitable commands. This tight control over permissions helps limit exposure to security risks associated with the command's misuse.

  CVE_2022_41409: >-
    Integer overflow vulnerability in pcre2test before 10.41 allows attackers to cause a denial of service or other unspecified impacts via negative input.

    Container Notes:
    This container does have the pcre2utils package but does not contianer the pcre2test package that is relevant to this vulnerability. 

  CVE_2024_4032: >-
    The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. 
    This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes,
    where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries. CPython 3.12.4 and 3.13.0a6 contain updated
    information from these registries and thus have the intended behavior.

    Container Notes:
    This container does not use the ipaddress module or the functions is_private or is_global. 

  GHSA_mq26_g339_26xf: >-
    This vulnerability is closely related to CVE-2023-57524, please see its description.


  CVE_2023_42363: >-
    Base container notes:
    This vulnerability involves a use-after-free in xasprintf in busybox.
    An attacker could use a crafted input to printf to gain code execution on the container.
    Based on this vulnerability, this container cannot be used in certain ways without software mitigation:
    It must not pass untrusted or user input to printf.
    Derivate containers may use this mitigation as long as they comply with the above guidance.





  CVE_2022_40735: >-
    The Diffie-Hellman Key Agreement Protocol allows use of long exponents that arguably make certain calculations unnecessarily expensive,
    because the 1996 van Oorschot and Wiener paper found that ”(appropriately) short exponents” can be used when there are adequate subgroup constraints,
    and these short exponents can lead to less expensive calculations than for long exponents. This issue is different from CVE-2002-20001 because
    it is based on an observation about exponent size, rather than an observation about numbers that are not public keys. The specific situations
    in which calculation expense would constitute a server-side vulnerability depend on the protocol (e.g., TLS, SSH, or IKE) and the DHE implementation
    details. In general, there might be an availability concern because of server-side resource consumption from DHE modular-exponentiation calculations.
    Finally, it is possible for an attacker to exploit this vulnerability and CVE-2002-20001 together.

    Container Notes:
    This container will be running with limits on the resources. This will help prevent any server side resource consumption. This container also runs behind a NGINX reverse proxy 
    which should mitigate this issue. 


  CVE_2024_5535: >-
    Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an empty supported client protocols buffer may cause a crash or memory contents to be sent to the peer.
    Impact summary: A buffer overread can have a range of potential consequences such as unexpected application beahviour or a crash. In particular this issue could result in up to 255
    bytes of arbitrary private data from memory being sent to the peer leading to a loss of confidentiality. However, only applications that directly call the SSL_select_next_proto
    function with a 0 length list of supported client protocols are affected by this issue. This would normally never be a valid scenario and is typically not under attacker control
    but may occur by accident in the case of a configuration or programming error in the calling application. The OpenSSL API function SSL_select_next_proto is typically used by TLS
    applications that support ALPN (Application Layer Protocol Negotiation) or NPN (Next Protocol Negotiation). NPN is older, was never standardised and is deprecated in favour of ALPN.
    We believe that ALPN is significantly more widely deployed than NPN. The SSL_select_next_proto function accepts a list of protocols from the server and a list of protocols from the
    client and returns the first protocol that appears in the server list that also appears in the client list. In the case of no overlap between the two lists it returns the first item
    in the client list. In either case it will signal whether an overlap between the two lists was found. In the case where SSL_select_next_proto is called with a zero length client
    list it fails to notice this condition and returns the memory immediately following the client list pointer (and reports that there was no overlap in the lists). This function is
    typically called from a server side application callback for ALPN or a client side application callback for NPN. In the case of ALPN the list of protocols supplied by the client
    is guaranteed by libssl to never be zero in length. The list of server protocols comes from the application and should never normally be expected to be of zero length. In this case
    if the SSL_select_next_proto function has been called as expected (with the list supplied by the client passed in the client/client_len parameters), then the application will not
    be vulnerable to this issue. If the application has accidentally been configured with a zero length server list, and has accidentally passed that zero length server list in the
    client/client_len parameters, and has additionally failed to correctly handle a “no overlap” response (which would normally result in a handshake failure in ALPN) then it will
    be vulnerable to this problem. In the case of NPN, the protocol permits the client to opportunistically select a protocol when there is no overlap. OpenSSL returns the first 
    client protocol in the no overlap case in support of this. The list of client protocols comes from the application and should never normally be expected to be of zero length. 
    However if the SSL_select_next_proto function is accidentally called with a client_len of 0 then an invalid memory pointer will be returned instead. If the application uses this
    output as the opportunistic protocol then the loss of confidentiality will occur. This issue has been assessed as Low severity because applications are most likely to be vulnerable
    if they are using NPN instead of ALPN - but NPN is not widely used. It also requires an application configuration or programming error. Finally, this issue would not typically be
    under attacker control making active exploitation unlikely. The FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue. Due to the low severity of this issue we are
    not issuing new releases of OpenSSL at this time. The fix will be included in the next releases when they become available.

    Container Notes:
    This container does not use the SSL_select_next_proto function therefore this can not be exploited. 

  CVE_2023_4039: >-
    A failure in the -fstack-protector feature in GCC-based toolchains that target AArch64 allows an attacker to exploit an existing buffer overflow
    in dynamically-sized local variables in your application without this being detected. This stack-protector failure only applies to C99-style dynamically-sized
    local variables or those created using alloca(). The stack-protector operates as intended for statically-sized local variables. The default behavior when the
    stack-protector detects an overflow is to terminate your application, resulting in controlled loss of availability. An attacker who can exploit a buffer overflow
    without triggering the stack-protector might be able to change program flow control to cause an uncontrolled loss of availability or to go further and affect confidentiality
    or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.

    Contianer Notes:
    This Container is running a python based app and does not involve compiling with GCC and does not use alloca() or C99-style dynamically-sized local variables. 


  CVE_2024_33602: >-
    nscd: netgroup cache assumes NSS callback uses in-buffer strings The Name Service Cache Daemon’s (nscd) netgroup cache can corrupt memory when the NSS
    callback does not store all strings in the provided buffer. The flaw was introduced in glibc 2.15 when the cache was added to nscd. This vulnerability is only present
    in the nscd binary.

    Container Notes:
    This container has NSCD stopped and disabled. 
  

  CVE_2024_33601: >-
    nscd: netgroup cache may terminate daemon on memory allocation failure The Name Service Cache Daemon's (nscd) netgroup cache uses xmalloc
    or xrealloc and these functions may terminate the process due to a memory allocation failure resulting in a denial of service to the clients.
    The flaw was introduced in glibc 2.15 when the cache was added to nscd. This vulnerability is only present in the nscd binary.

    Container Notes:
    This container has NSCD stopped and disabled. 
  
  CVE_2024_33600: >-
    nscd: Null pointer crashes after notfound response If the Name Service Cache Daemon’s (nscd) cache fails to add a not-found netgroup
    response to the cache, the client request can result in a null pointer dereference. This flaw was introduced in glibc 2.15 when the cache was added to nscd.
    This vulnerability is only present in the nscd binary.

    Container Notes:
    This container has NSCD stopped and disabled. 
  
  CVE_2024_33599: >-
    nscd: Stack-based buffer overflow in netgroup cache If the Name Service Cache Daemon’s (nscd) fixed size cache is exhausted by client requests
    then a subsequent client request for netgroup data may result in a stack-based buffer overflow. This flaw was introduced in glibc 2.15 when the
    cache was added to nscd. This vulnerability is only present in the nscd binary.

    Container Notes:
    This container has NSCD stopped and disabled. 

  CVE_2024_0397: >- 
    A defect was discovered in the Python “ssl” module where there is a memory race condition with the ssl.SSLContext methods “cert_store_stats()” and “get_ca_certs()”.
    The race condition can be triggered if the methods are called at the same time as certificates are loaded into the SSLContext, such as during the TLS handshake with
    a certificate directory configured. This issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.

    Container Notes:
    Although this container uses the vulnerable version of CPython, it does not use “cert_store_stats()” and “get_ca_certs()” making this unexploitable.


  CVE_2024_4741: >-
    Use After Free with SSL_free_buffers

    Container Notes:
    This CVE is not well documented but from what I can find The function SSL_free_buffers is related to the SSL/TLS implementation, often found in libraries like OpenSSL.
    It is responsible for freeing memory buffers associated with an SSL object. If there's a bug or incorrect handling in the use of SSL_free_buffers,
    it could lead to a "use after free" condition. The container does not use SSL_free_buffers so I do not believe this applies. 
  

  CVE_2024_4603: >-
    Issue summary: Checking excessively long DSA keys or parameters may be very slow. Impact summary: Applications that use the functions EVP_PKEY_param_check()
    or EVP_PKEY_public_check() to check a DSA public key or DSA parameters may experience long delays. Where the key or parameters that are being checked have
    been obtained from an untrusted source this may lead to a Denial of Service. The functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform various
    checks on DSA parameters. Some of those computations take a long time if the modulus (`p` parameter) is too large. Trying to use a very large modulus is slow
    and OpenSSL will not allow using public keys with a modulus which is over 10,000 bits in length for signature verification. However the key and parameter check
    functions do not limit the modulus size when performing the checks. An application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check() and supplies a 
    key or parameters obtained from an untrusted source could be vulnerable to a Denial of Service attack. These functions are not called by OpenSSL itself on untrusted DSA keys so
    only applications that directly call these functions may be vulnerable. Also vulnerable are the OpenSSL pkey and pkeyparam command line applications when using the `-check`
    option. The OpenSSL SSL/TLS implementation is not affected by this issue. The OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.

    Container notes:
    This container does not use the openSSL FIPS providers. It uses the SSL implementation. It also does not use the vulnerable functions EVP_PKEY_param_check() or
    EVP_PKEY_public_check() 


  CVE_2024_2511: >-
    Issue summary: Some non-default TLS server configurations can cause unbounded memory growth when processing TLSv1.3 sessions Impact summary:
    An attacker may exploit certain server configurations to trigger unbounded memory growth that would lead to a Denial of Service This problem can occur 
    in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is being used (but not if early_data support is also configured and the default anti-replay protection 
    is in use). In this case, under certain conditions, the session cache can get into an incorrect state and it will fail to flush properly as it fills. The
    session cache will continue to grow in an unbounded manner. A malicious client could deliberately create the scenario for this failure to force a Denial of
    Service. It may also happen by accident in normal operation. This issue only affects TLS servers supporting TLSv1.3. It does not affect TLS clients. The
    FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL 1.0.2 is also not affected by this issue.

    Container Notes:
    This container uses Nginx as a reverse proxy. The configuration does not set `ssl_session_tickets off`, meaning the `SSL_OP_NO_TICKET` option is not used. 
    Therefore, the session cache issue leading to unbounded memory growth is not applicable. 

  CVE_2021_46848: >-
    GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der.
    
    Container Notes:
    Out of bounds read in API when using invalid value, not likely to be exploitable in any way. Container does not use this function.


  CVE_2024_37370: >-
    In MIT Kerberos 5 (aka krb5) before 1.21.3, an attacker can modify the plaintext Extra Count field of a confidential GSS krb5 wrap token, causing the unwrapped
    token to appear truncated to the application.

    Container Notes:
    The application is deployed behind an Nginx reverse proxy, which provides additional layers of security and does not rely on krb5 for any part of its operation.
    The reverse proxy handles incoming requests and forwards them to the application securely, ensuring that the krb5 vulnerability does not pose a risk.


  CVE_2024_37371: >-
    In MIT Kerberos 5 (aka krb5) before 1.21.3, an attacker can cause invalid memory reads during GSS message token handling by sending message tokens with invalid length fields.

    Container Notes:
    The application is deployed behind an Nginx reverse proxy, which provides additional layers of security and does not rely on krb5 for any part of its operation.
    The reverse proxy handles incoming requests and forwards them to the application securely, ensuring that the krb5 vulnerability does not pose a risk.

    
  # Web security for this application is handled by an upstream nginx reverse proxy
  # I have left ZAP "on" to ensure vulnerabilities are mitigated specifically. 
  ZAP_10038_1:  add_header Content-Security-Policy "default-src 'self';" always;" in upstream engine_nginx_proxy default.conf
  ZAP_10020_1:  add_header X-Frame-Options sameorigin always; in upstream engine_nginx_proxy default.conf
  ZAP_10021:  add_header X-Content-Type-Options nosniff always; in upstream engine_nginx_proxy default.conf
  ZAP_10027:  Informational Disclosure ignored- no risk. 
  ZAP_10109:  Informational Disclosure ignored- no risk. 
  ZAP_10036:  proxy_set_header Host $host; in upstream nginx_proxy default.conf
  ZAP_10096:  proxy_hide_header Date;  proxy_hide_header Last-Modified; in upstream engine_nginx_proxy default.conf
  ZAP_10104:  reverse proxy standardizes user-agent headers
  ZAP_90034: The NGINX configuration is handled by a different container which takes the appropriate steps to mitigate this threat.
